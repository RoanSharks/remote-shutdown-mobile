name: Build Android APK

on:
    push:
        branches: [main]
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '17'

            - name: Setup Android SDK
              uses: android-actions/setup-android@v3
              env:
                  SKIP_JDK_VERSION_CHECK: true
                  JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64

            - name: Set up JDK 11 for buildozer
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '11'

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"

            - name: Install system dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y python3-pip build-essential git zip unzip wget curl
                  sudo apt-get install -y python3-setuptools python3-dev libffi-dev libssl-dev

            - name: Install Python dependencies
              run: |
                  pip install --upgrade pip
                  pip install cython==0.29.33
                  pip install buildozer
                  pip install python-for-android

            - name: Accept Android licenses
              run: |
                  export JAVA_HOME=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64
                  export PATH=$JAVA_HOME/bin:$PATH
                  yes | sdkmanager --licenses

            - name: Install Android components
              run: |
                  export JAVA_HOME=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64
                  export PATH=$JAVA_HOME/bin:$PATH
                  sdkmanager "platform-tools" "platforms;android-29" "build-tools;29.0.3" "ndk;21.4.7075529"

            - name: Verify Android Setup
              run: |
                  export JAVA_HOME=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64
                  export PATH=$JAVA_HOME/bin:$PATH
                  echo "=== Android SDK Setup Verification ==="
                  echo "ANDROID_HOME: $ANDROID_HOME"
                  echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
                  echo ""
                  echo "Looking for AIDL binary:"
                  find $ANDROID_HOME -name "aidl" -type f 2>/dev/null || echo "AIDL not found!"
                  echo ""
                  echo "Testing AIDL command:"
                  which aidl || echo "AIDL not in PATH"
                  $ANDROID_HOME/build-tools/29.0.3/aidl --help 2>/dev/null | head -3 || echo "Cannot run AIDL from build-tools"

            - name: Build APK
              run: |
                  echo "=== Starting APK Build ==="
                  
                  # Switch to Java 11 specifically for buildozer (older SDK tools compatibility)
                  export JAVA_HOME=/usr/lib/jvm/temurin-11-jdk-amd64
                  export PATH=/usr/lib/jvm/temurin-11-jdk-amd64/bin:$PATH
                  
                  # AGGRESSIVELY FORCE BUILDOZER TO USE SYSTEM SDK
                  # Remove ALL buildozer cache and force it to use our SDK
                  rm -rf /home/runner/.buildozer/
                  
                  # Set EVERY possible environment variable that buildozer might check
                  export ANDROID_HOME=/usr/local/lib/android/sdk
                  export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
                  export ANDROIDSDK=/usr/local/lib/android/sdk
                  export ANDROID_SDK=/usr/local/lib/android/sdk
                  export ANDROIDNDK=/usr/local/lib/android/sdk/ndk/21.4.7075529
                  export ANDROID_NDK_ROOT=/usr/local/lib/android/sdk/ndk/21.4.7075529
                  export ANDROIDAPI=29
                  export ANDROIDNDKVER=r21e
                  
                  # Create buildozer directories and FORCE symlinks BEFORE buildozer runs
                  mkdir -p /home/runner/.buildozer/android/platform/
                  ln -sf /usr/local/lib/android/sdk /home/runner/.buildozer/android/platform/android-sdk
                  ln -sf /usr/local/lib/android/sdk/ndk/21.4.7075529 /home/runner/.buildozer/android/platform/android-ndk-r21e
                  
                  # Add Android tools to PATH with HIGHEST priority
                  export PATH=/usr/local/lib/android/sdk/build-tools/29.0.3:/usr/local/lib/android/sdk/platform-tools:/usr/local/lib/android/sdk/tools/bin:$PATH
                  
                  echo "=== AGGRESSIVE Environment Check ==="
                  echo "JAVA_HOME: $JAVA_HOME"
                  echo "ANDROID_HOME: $ANDROID_HOME"
                  echo "PATH: $PATH"
                  java -version
                  echo "AIDL location:"
                  which aidl || echo "AIDL NOT IN PATH!"
                  find /usr/local/lib/android/sdk -name "aidl" -type f
                  echo "Testing AIDL directly:"
                  /usr/local/lib/android/sdk/build-tools/29.0.3/aidl --help | head -3 || echo "AIDL BINARY BROKEN!"
                  
                  echo "=== Buildozer SDK verification ==="
                  ls -la /home/runner/.buildozer/android/platform/
                  ls -la /home/runner/.buildozer/android/platform/android-sdk/build-tools/ || echo "NO BUILD TOOLS IN BUILDOZER SDK!"
                  
                  # FINAL NUCLEAR OPTION: Copy AIDL directly to where buildozer expects it
                  mkdir -p /home/runner/.buildozer/android/platform/android-sdk/build-tools/29.0.3/
                  cp /usr/local/lib/android/sdk/build-tools/29.0.3/aidl /home/runner/.buildozer/android/platform/android-sdk/build-tools/29.0.3/aidl || echo "FAILED TO COPY AIDL!"
                  
                  # Build with verbose output
                  buildozer android debug --verbose

            - name: Find APK
              run: |
                  find . -name "*.apk" -type f
                  ls -la bin/ || echo "No bin directory"

            - name: Upload APK
              uses: actions/upload-artifact@v4
              with:
                  name: remote-controller-apk
                  path: "bin/*.apk"
                  if-no-files-found: error
